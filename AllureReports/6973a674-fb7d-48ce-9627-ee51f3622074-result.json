{"name": "test_CredKart_Registration_003", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=138.0.7204.101)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff69fe3fea5+79173]\n\tGetHandleVerifier [0x0x7ff69fe3ff00+79264]\n\t(No symbol) [0x0x7ff69fbf9c8c]\n\t(No symbol) [0x0x7ff69fc51a84]\n\t(No symbol) [0x0x7ff69fc43464]\n\t(No symbol) [0x0x7ff69fc7896a]\n\t(No symbol) [0x0x7ff69fc42d16]\n\t(No symbol) [0x0x7ff69fc78b80]\n\t(No symbol) [0x0x7ff69fca100d]\n\t(No symbol) [0x0x7ff69fc78743]\n\t(No symbol) [0x0x7ff69fc414c1]\n\t(No symbol) [0x0x7ff69fc42253]\n\tGetHandleVerifier [0x0x7ff6a010a2dd+3004797]\n\tGetHandleVerifier [0x0x7ff6a010472d+2981325]\n\tGetHandleVerifier [0x0x7ff6a0123380+3107360]\n\tGetHandleVerifier [0x0x7ff69fe5aa2e+188622]\n\tGetHandleVerifier [0x0x7ff69fe622bf+219487]\n\tGetHandleVerifier [0x0x7ff69fe48df4+115860]\n\tGetHandleVerifier [0x0x7ff69fe48fa9+116297]\n\tGetHandleVerifier [0x0x7ff69fe2f558+11256]\n\tBaseThreadInitThunk [0x0x7ff9933b257d+29]\n\tRtlUserThreadStart [0x0x7ff99456af08+40]", "trace": "self = <testCases.test_CredKart_User_Profile.Test_User_Profile_Class object at 0x000001B61FC02190>\n\n    def test_CredKart_Registration_003(self):\n        #self.log.info( \"Testcase test_CredKart_Registration_003 is started \")\n        #self.log.info(f\"Opening browser and landing the correct page--{self.register_url}\")\n        self.driver.get(self.register_url)\n        self.rp = Registration_Page_Class(self.driver) # Object Creation\n        name = Faker().name()\n        email = Faker().email()\n        print(f\"Name: {name}, Email: {email}\")\n        # Field - Name\n        self.log.info(f\"Entering Name--{name}\")\n        self.rp.Enter_Name(name)\n    \n        # Field - Email\n        self.log.info(f\"Entering Email--{email}\")\n        self.rp.Enter_Email(email)\n    \n        # Field - Password\n        self.log.info(f\"Entering the password\")\n        self.rp.Enter_Password(\"Credence@123\")\n    \n        # Field - Confirm Password\n        self.log.info(f\"Entering Confirm Password\")\n        self.rp.Enter_Confirm_Password(\"Credence@123\")\n    \n        # Button - Submit\n        self.log.info(f\"Entering on Registration button\")\n        self.rp.Click_Login_Button()  # registration button\n    \n        #Verify Registration Successfully\n        #self.log.info(\"Verify user Registration Successfully\")\n        if self.rp.verify_menu() == \"Pass\":\n            #self.log.info(\"user Registration Successfully\")\n            self.driver.save_screenshot(r\"X:\\Automation Testing\\04. CredKart_Pytest_Framework\\Screenshots\\User login Successfully.png\")\n            #self.log.info(\"Clicking on Menu Button\")\n            self.rp.Click_Menu_Button()\n            #self.log.info(\"Clicking on the logout link\")\n>           self.rp.Click_Logout_Link()\n\ntestCases\\test_CredKart_User_Profile.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\Login_Page.py:33: in Click_Logout_Link\n    self.driver.find_element(By.CSS_SELECTOR, self.click_logout_link_css).click()\n..\\03. Pytest Framework\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\03. Pytest Framework\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\03. Pytest Framework\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B61FCB6E40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...ff69fe2f558+11256]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff9933b257d+29]\\\\n\\\\tRtlUserThreadStart [0x0x7ff99456af08+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=138.0.7204.101)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff69fe3fea5+79173]\nE       \tGetHandleVerifier [0x0x7ff69fe3ff00+79264]\nE       \t(No symbol) [0x0x7ff69fbf9c8c]\nE       \t(No symbol) [0x0x7ff69fc51a84]\nE       \t(No symbol) [0x0x7ff69fc43464]\nE       \t(No symbol) [0x0x7ff69fc7896a]\nE       \t(No symbol) [0x0x7ff69fc42d16]\nE       \t(No symbol) [0x0x7ff69fc78b80]\nE       \t(No symbol) [0x0x7ff69fca100d]\nE       \t(No symbol) [0x0x7ff69fc78743]\nE       \t(No symbol) [0x0x7ff69fc414c1]\nE       \t(No symbol) [0x0x7ff69fc42253]\nE       \tGetHandleVerifier [0x0x7ff6a010a2dd+3004797]\nE       \tGetHandleVerifier [0x0x7ff6a010472d+2981325]\nE       \tGetHandleVerifier [0x0x7ff6a0123380+3107360]\nE       \tGetHandleVerifier [0x0x7ff69fe5aa2e+188622]\nE       \tGetHandleVerifier [0x0x7ff69fe622bf+219487]\nE       \tGetHandleVerifier [0x0x7ff69fe48df4+115860]\nE       \tGetHandleVerifier [0x0x7ff69fe48fa9+116297]\nE       \tGetHandleVerifier [0x0x7ff69fe2f558+11256]\nE       \tBaseThreadInitThunk [0x0x7ff9933b257d+29]\nE       \tRtlUserThreadStart [0x0x7ff99456af08+40]\n\n..\\03. Pytest Framework\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException"}, "attachments": [{"name": "log", "source": "a696cb87-35ee-4509-81e2-5e99cd50e6d3-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "e593e028-cdf2-40e1-b996-c8f6b10887a6-attachment.txt", "type": "text/plain"}], "start": 1752563636449, "stop": 1752563654289, "uuid": "a2445f43-fdb7-42eb-9108-ab880bcde191", "historyId": "f6914ab63bd7612992a48681c9e984fe", "testCaseId": "f6914ab63bd7612992a48681c9e984fe", "fullName": "testCases.test_CredKart_User_Profile.Test_User_Profile_Class#test_CredKart_Registration_003", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_CredKart_User_Profile"}, {"name": "subSuite", "value": "Test_User_Profile_Class"}, {"name": "host", "value": "LAPTOP-RTT89BJD"}, {"name": "thread", "value": "3044-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_CredKart_User_Profile"}]}